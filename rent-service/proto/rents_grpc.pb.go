// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: rents.proto

package rent_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RentService_RentCar_FullMethodName          = "/rent.RentService/RentCar"
	RentService_GetRentalHistory_FullMethodName = "/rent.RentService/GetRentalHistory"
)

// RentServiceClient is the client API for RentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentServiceClient interface {
	RentCar(ctx context.Context, in *RentRequest, opts ...grpc.CallOption) (*RentResponse, error)
	GetRentalHistory(ctx context.Context, in *RentalHistoryRequest, opts ...grpc.CallOption) (*RentalHistoryResponse, error)
}

type rentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentServiceClient(cc grpc.ClientConnInterface) RentServiceClient {
	return &rentServiceClient{cc}
}

func (c *rentServiceClient) RentCar(ctx context.Context, in *RentRequest, opts ...grpc.CallOption) (*RentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RentResponse)
	err := c.cc.Invoke(ctx, RentService_RentCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) GetRentalHistory(ctx context.Context, in *RentalHistoryRequest, opts ...grpc.CallOption) (*RentalHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RentalHistoryResponse)
	err := c.cc.Invoke(ctx, RentService_GetRentalHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentServiceServer is the server API for RentService service.
// All implementations must embed UnimplementedRentServiceServer
// for forward compatibility
type RentServiceServer interface {
	RentCar(context.Context, *RentRequest) (*RentResponse, error)
	GetRentalHistory(context.Context, *RentalHistoryRequest) (*RentalHistoryResponse, error)
	mustEmbedUnimplementedRentServiceServer()
}

// UnimplementedRentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRentServiceServer struct {
}

func (UnimplementedRentServiceServer) RentCar(context.Context, *RentRequest) (*RentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentCar not implemented")
}
func (UnimplementedRentServiceServer) GetRentalHistory(context.Context, *RentalHistoryRequest) (*RentalHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRentalHistory not implemented")
}
func (UnimplementedRentServiceServer) mustEmbedUnimplementedRentServiceServer() {}

// UnsafeRentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentServiceServer will
// result in compilation errors.
type UnsafeRentServiceServer interface {
	mustEmbedUnimplementedRentServiceServer()
}

func RegisterRentServiceServer(s grpc.ServiceRegistrar, srv RentServiceServer) {
	s.RegisterService(&RentService_ServiceDesc, srv)
}

func _RentService_RentCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).RentCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentService_RentCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).RentCar(ctx, req.(*RentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_GetRentalHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentalHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).GetRentalHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentService_GetRentalHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).GetRentalHistory(ctx, req.(*RentalHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RentService_ServiceDesc is the grpc.ServiceDesc for RentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rent.RentService",
	HandlerType: (*RentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RentCar",
			Handler:    _RentService_RentCar_Handler,
		},
		{
			MethodName: "GetRentalHistory",
			Handler:    _RentService_GetRentalHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rents.proto",
}
